VAGRANTFILE_API_VERSION = "2"

def get_default_switch_ip
  ip = nil
  IO.popen('powershell -Command "Get-NetIPAddress -InterfaceAlias \'vEthernet (Default Switch)\' -AddressFamily IPv4 | Select-Object -ExpandProperty IPAddress"') do |io|
    ip = io.read.strip
  end
  ip.empty? ? nil : ip
end

host_ip = get_default_switch_ip
if host_ip.nil?
  raise "Error: Could not detect host IP for 'vEthernet (Default Switch)'"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  nodes = [
    { :hostname => "ansible-ubuntu22", :role => ["ubuntu22", "ansible-control"], :box => "generic/ubuntu2204" },
    { :hostname => "ansible-node1", :role => ["ubuntu22"],  :box => "generic/ubuntu2204" },
    { :hostname => "ansible-node2", :role => ["rocky9"], :box => "generic/rocky9" }
  ]

  config.vm.provider "hyperv" do |h|
    h.memory = 1024
    h.cpus = 1
    h.vm_integration_services = {
      guest_service_interface: true,
      heartbeat: true,
      key_value_pair_exchange: true,
      shutdown: true,
      time_synchronization: true,
      vss: true
    }
  end

  nodes.each do |node|
    config.vm.define node[:hostname] do |node_config|
      node_config.vm.box = node[:box]
      node_config.vm.hostname = node[:hostname]
      node_config.vm.network "private_network", type: "dhcp", virtual_switch: "Default Switch"

      node_config.vm.synced_folder ".", "/vagrant",
        type: "smb",
        smb_username: "vagrant",
        smb_password: "vagrant",
        smb_host: host_ip

      #node_config.vm.synced_folder "./shared", "/home/vagrant/shared", type: "rsync",
      #  owner: "vagrant",
      #  group: "vagrant",
      #  rsync__auto: true,
      #  rsync__args: ["--verbose", "--archive", "--compress"]

      if node[:role].include?("ansible-control")
        node_config.vm.synced_folder "./ansible", "/home/vagrant/ansible",
          type: "smb",
          smb_username: "vagrant",
          smb_password: "vagrant",
          smb_host: host_ip
      end

      node[:role].each do |role|
        role_script_path = "scripts/#{role}.sh"
        if File.exist?(role_script_path)
          node_config.vm.provision :shell, path: role_script_path
        else
          warn "Warning: script for role '#{role}' not found at #{role_script_path}"
        end
      end

      node[:role].each do |role|
        role_script_path = "scripts/#{node[:hostname]}.sh"
        if File.exist?(role_script_path)
          node_config.vm.provision :shell, path: role_script_path
        else
          warn "Warning: script for role '#{role}' not found at #{role_script_path}"
        end
      end

      node_config.vm.provider "hyperv" do |h|
        h.vmname = node[:hostname]
      end

      node_config.trigger.after :up do |trigger|
        trigger.info = "Adding InternalNIC to #{node[:hostname]}"
        trigger.run = {
          inline: <<-POWERSHELL
            if (-not (Get-VMNetworkAdapter -VMName "#{node[:hostname]}" -Name "InternalNIC" -ErrorAction SilentlyContinue)) {
              Stop-VM -Name "#{node[:hostname]}" -Force
              Add-VMNetworkAdapter -VMName "#{node[:hostname]}" -SwitchName "InternalSwitch" -Name "InternalNIC"
              Start-VM -Name "#{node[:hostname]}"
            }
          POWERSHELL
        }
      end

    end
  end
end
